openapi: "3.0.0"
info:
  title: Admin Routes
  version: 1.0.0
  description: |
    Endpoints for Admin functionality including user approvals, email allotment, 
    form creation/publishing, and question management.

servers:
  - url: http://localhost:5000
    description: Local development server

paths:
  /admin/users:
    get:
      summary: Get pending users
      description: Fetches users who are `emailVerified = true`, `emailAlloted = false` and `status = PENDING or REJECTED`.
      security:
        - userCookie: []
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Users fetched" }
                  count: { type: integer, example: 2 }
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, example: "user-uuid-123" }
                        email: { type: string, example: "user@example.com" }
                        status: { type: string, example: "PENDING" }
        '401':
          description: Unauthorized - No valid admin cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Unauthorized" }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Some error occurred" }

  /admin/approveUser/{id}:
    patch:
      summary: Approve a user
      description: Approves a user by setting status = APPROVED.
      security:
        - userCookie: []
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
          description: UUID of the user
      responses:
        '200':
          description: User approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "User has been verified successfully" }
                  updatedUser:
                    type: object
                    properties:
                      id: { type: string, example: "user-uuid-123" }
                      status: { type: string, example: "APPROVED" }
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Invalid user ID" }
        '500':
          description: Server error while approving user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Error while verifying" }

  /admin/allotEmail/{id}:
    patch:
      summary: Allot email to approved user
      description: Marks a userâ€™s `emailAlloted = true`. Only allowed if user is `APPROVED`.
      security:
        - userCookie: []
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
          description: UUID of the user
      responses:
        '200':
          description: Email allotted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Email has been verified successfully" }
                  updatedUser:
                    type: object
                    properties:
                      id: { type: string, example: "user-uuid-123" }
                      emailAlloted: { type: boolean, example: true }
        '400':
          description: Email not approved or invalid ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Email is not approved yet" }
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "User not found" }
        '500':
          description: Error while allotting email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Error while verifying email" }

  /admin/createForm:
    post:
      summary: Create a new form
      description: Creates a form and sets a `form` cookie containing the form ID.
      security:
        - userCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formName: { type: string, example: "Admission Form 2025" }
      responses:
        '201':
          description: Form created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Form created successfully" }
        '400':
          description: Missing formName or invalid user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "FormName is required" }
        '500':
          description: Failed to create form
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to create form" }

  /admin/publishForm:
    post:
      summary: Publish a form
      description: Publishes the form stored in the `form` cookie. Only one form can be live at a time.
      security:
        - userCookie: []
        - formCookie: []
      responses:
        '200':
          description: Form published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Form is live now" }
        '400':
          description: Another form is already live
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Another form is live" }
        '500':
          description: Failed to publish form
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to publish form" }

  /admin/addQuestion:
    post:
      summary: Add a question to form
      description: Adds a question to the form specified in the `form` cookie.
      security:
        - userCookie: []
        - formCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question: { type: string, example: "What is your name?" }
                type: { type: string, example: "TEXT" }
                required: { type: boolean, example: true }
                options:
                  type: array
                  items:
                    type: string
                  example: ["Option 1", "Option 2"]
      responses:
        '201':
          description: Question added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Question added successfully" }
                  newQuestion:
                    type: object
                    properties:
                      id: { type: string, example: "question-uuid-123" }
                      question: { type: string, example: "What is your name?" }
        '400':
          description: Invalid question data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Invalid question payload" }
        '500':
          description: Failed to add question
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to add question" }

  /admin/deleteQuestion/{id}:
    delete:
      summary: Delete a question
      description: Deletes a question by ID, ensuring it belongs to the form in the `form` cookie.
      security:
        - userCookie: []
        - formCookie: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Question ID to delete
      responses:
        '200':
          description: Question deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Question deleted successfully" }
        '400':
          description: Invalid question or form ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Invalid question ID" }
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Question not found" }
        '500':
          description: Failed to delete question
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to delete question" }

components:
  securitySchemes:
    userCookie:
      type: apiKey
      in: cookie
      name: user
      description: Authentication cookie for admin identification
    formCookie:
      type: apiKey
      in: cookie
      name: form
      description: Cookie to track current form being created or edited
