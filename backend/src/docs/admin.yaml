openapi: "3.0.0"
info:
  title: Admin Routes
  version: 2.0.0
  description: |
    Endpoints for Admin functionality including user approvals, email allotment, 
    form creation/publishing, and question management.
    
    Authentication uses JWT tokens stored in httpOnly cookies:
    - accessToken: Short-lived token (15 minutes)
    - refreshToken: Long-lived token (7 days)
    
    Access tokens are automatically refreshed using refresh tokens when expired.

servers:
  - url: http://localhost:5000
    description: Local development server

paths:
  /admin/users:
    get:
      summary: Get pending users
      description: Fetches users who are `emailVerified = true`, `emailAlloted = false` and `status = PENDING or REJECTED`.
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Users fetched" }
                  count: { type: integer, example: 2 }
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, example: "user-uuid-123" }
                        email: { type: string, example: "user@example.com" }
                        status: { type: string, example: "PENDING" }
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - User is not a SuperAdmin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /admin/approveUser/{id}:
    patch:
      summary: Approve a user
      description: Approves a user by setting status = APPROVED. Requires SuperAdmin role.
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
          description: UUID of the user to approve
      responses:
        '200':
          description: User approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "User has been verified successfully" }
                  updatedUser:
                    type: object
                    properties:
                      id: { type: string, example: "user-uuid-123" }
                      status: { type: string, example: "APPROVED" }
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Invalid user ID" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - SuperAdmin only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '500':
          description: Server error while approving user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Error while verifying" }

  /admin/allotEmail/{id}:
    patch:
      summary: Allot email to approved user
      description: Marks a user's `emailAlloted = true`. Only allowed if user is `APPROVED`. Requires SuperAdmin role.
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
          description: UUID of the user
      responses:
        '200':
          description: Email allotted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Email has been verified successfully" }
                  updatedUser:
                    type: object
                    properties:
                      id: { type: string, example: "user-uuid-123" }
                      emailAlloted: { type: boolean, example: true }
        '400':
          description: Email not approved or invalid ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Email is not approved yet" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - SuperAdmin only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "User not found" }
        '500':
          description: Error while allotting email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Error while verifying email" }

  /admin/createForm:
    post:
      summary: Create a new form
      description: Creates a form and sets a `form` cookie containing the form ID. Requires SuperAdmin role.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - formName
              properties:
                formName: { type: string, example: "Admission Form 2025" }
      responses:
        '201':
          description: Form created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Form created successfully" }
                  form:
                    type: object
                    properties:
                      id: { type: string, example: "form-uuid-123" }
                      formName: { type: string, example: "Admission Form 2025" }
        '400':
          description: Missing formName or invalid user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "FormName is required" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - SuperAdmin only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '500':
          description: Failed to create form
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to create form" }

  /admin/publishForm:
    post:
      summary: Publish a form
      description: Publishes the form stored in the `form` cookie. Only one form can be live at a time. Requires SuperAdmin role.
      security:
        - cookieAuth: []
        - formCookie: []
      responses:
        '200':
          description: Form published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Form is live now" }
                  form:
                    type: object
                    properties:
                      id: { type: string, example: "form-uuid-123" }
                      isPublished: { type: boolean, example: true }
        '400':
          description: Another form is already live or no form cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Another form is live" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - SuperAdmin only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '500':
          description: Failed to publish form
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to publish form" }

  /admin/addQuestion:
    post:
      summary: Add a question to form
      description: Adds a question to the form specified in the `form` cookie. Requires SuperAdmin role.
      security:
        - cookieAuth: []
        - formCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - type
                - required
              properties:
                question: { type: string, example: "What is your name?" }
                type: 
                  type: string
                  enum: [TEXT, TEXTAREA, NUMBER, EMAIL, DATE, SELECT, RADIO, CHECKBOX, FILE]
                  example: "TEXT"
                required: { type: boolean, example: true }
                options:
                  type: array
                  items:
                    type: string
                  example: ["Option 1", "Option 2"]
                  description: Required for SELECT, RADIO, and CHECKBOX types
      responses:
        '201':
          description: Question added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Question added successfully" }
                  newQuestion:
                    type: object
                    properties:
                      id: { type: string, example: "question-uuid-123" }
                      question: { type: string, example: "What is your name?" }
                      type: { type: string, example: "TEXT" }
                      required: { type: boolean, example: true }
        '400':
          description: Invalid question data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Invalid question payload" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - SuperAdmin only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '500':
          description: Failed to add question
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to add question" }

  /admin/deleteQuestion/{id}:
    delete:
      summary: Delete a question
      description: Deletes a question by ID, ensuring it belongs to the form in the `form` cookie. Requires SuperAdmin role.
      security:
        - cookieAuth: []
        - formCookie: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Question ID to delete
      responses:
        '200':
          description: Question deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Question deleted successfully" }
                  deletedQuestion:
                    type: object
                    properties:
                      id: { type: string, example: "question-uuid-123" }
        '400':
          description: Invalid question or form ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Invalid question ID" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - SuperAdmin only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Question not found" }
        '500':
          description: Failed to delete question
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Failed to delete question" }

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
      description: |
        JWT access token stored in httpOnly cookie. 
        Automatically refreshed using refreshToken cookie when expired.
        Contains: { userId, email, userRole }
    formCookie:
      type: apiKey
      in: cookie
      name: form
      description: Cookie to track current form being created or edited

  schemas:
    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          enum:
            - "Access token required"
            - "Invalid access token"
            - "Session expired. Please login again."
            - "Unauthorized access"
          example: "Access token required"
        error:
          type: string
          enum:
            - "ACCESS_TOKEN_INVALID"
            - "REFRESH_TOKEN_INVALID"
          example: "ACCESS_TOKEN_INVALID"

    ForbiddenError:
      type: object
      properties:
        message:
          type: string
          example: "Access denied: SuperAdmin only"

    ServerError:
      type: object
      properties:
        message:
          type: string
          example: "Some error occurred"
        error:
          type: string
          example: "Internal server error"

  responses:
    UnauthorizedError:
      description: Authentication token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    
    ForbiddenError:
      description: User does not have required permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'